#!/bin/sh
#--------------------------------------------------------
# User specific functions
#--------------------------------------------------------
# Get an absolute path
# usage: path=$(abs_path $1)
function abs_path {
case $1 in
  */*)
    (cd "${1%/*}" &>/dev/null && printf "%s/%s" "$(pwd)" "${1##*/}");;
  *)
    printf "%s/%s" "$(pwd)" "$1";;
esac
}

# List of all installed Perl modules
function cpan_list {
  perl -MExtUtils::Installed -MData::Dumper -e  'my ($inst) = ExtUtils::Installed->new(); print Dumper($inst->modules());'
}

# move file to the Gnome Wastebacket
function del {
#echo $FULLNAME
if [ $1 ]; then
  if [ $1 == "--help" ]; then
    echo "Usage: delete [path/filename]"
    echo "Delete is a safer alternative to rm (remove), as Delete will send your file to the Gnome Wastebasket."
  else
    cd `dirname $1`
    pathname=`pwd`
    filename=$1 ##*/
    if [ $pathname != "/" ]; then
      fullname="$pathname/$filename"
    else
      fullname="/$filename"
    fi
    mv $1 ~/.local/share/Trash/files/
    timestamp="`date +%Y`-`date +%m`-`date +0`T`date +%X`"
    echo -e "[Trash Info]\nPath=$fullname\nDeletionDate=$timestamp" >> ~/.local/share/Trash/info/$filename.trashinfo
  fi
else
  echo -e "$0: missing operand\nTry '$0 --help' for more information."
fi
}

# Converts png images into eps
function png2eps {
  fname=`basename $1 .png`
  convert $1 $fname.ps
  ps2eps -f --fixps $fname.ps
}

# If file is a TeX file, then run gvim synchronized with srcltx
function gvim {
  eval `perl -e '
    use File::Basename;
    my ($fn, $fp, $fs) = fileparse($ARGV[0], qr:\\.[^.]*:);
    if ($fs eq ".tex") { \
      print "/usr/local/bin/gvim --servername vimtex $ARGV[0]";
    } else { \
      print "/usr/local/bin/gvim $ARGV[0]";
    }' $1`
}

# Generates a pass
# e.g. pass "gmail.com"
function pass {
  echo $1 | md5sum | sed -e 's/0/O/g' | sed -e 's/1/;/g' | sed -e 's/2/@/g' | sed -e 's/4/%/g' | sed -e 's/b/B/g'
}

calc() {
  echo "scale=4;${*}" | bc
}

cdl() {
  cd "${*}" && ls -l
  #cd "$*" && ls -l
}

total() {
  # other option
  # du -ch "${@}" | grep total
  du -sh
}

h() {
echo ${*}
  if [ $# -ge 1 ]
  then
    history | grep "$*"
  else
    history
  fi
}

function myip {
  # other option
  # ip addr show |grep "inet " |grep -v 127.0.0. |head -1|cut -d" " -f6|cut -d/ -f1
  ip route get 8.8.8.8 | sed -n '/src/{s/.*src *//p;q}'
}

function top_files() {
  if [[ $1 ]]
  then
    number=$1
  else
    number=10
  fi  
  find $2 -type f -exec du -Sh {} + | sort -rh | head -n $number
}

function top_dirs() {
  if [[ $1 ]]
  then
    number=$1
  else
    number=10
  fi 
  du -Sh $2 | sort -rh | head $number
}

function kblayout {
  # setxkbmap -query | grep layout | sed -e 's/layout:[[:space:]]*//'
  setxkbmap -v | awk -F "+" '/symbols/ {print $2}'
}

function killp {
  kill `lsof -t -i:$1`
}

